<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns="http://www.pbcore.org/PBCore/PBCoreNamespace.html"
    xsi:schemaLocation="http://www.pbcore.org/PBCore/PBCoreNamespace.html http://pbcore.org/xsd/pbcore-2.0.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <!-- Gives line breaks etc -->
    <xsl:output encoding="UTF-8" method="xml" version="1.0" standalone="yes" indent="yes"/>

    <!--Output definitions -->
    <xsl:template match="Mediainfo">
        <pbcoreCollection>

            <xsl:apply-templates select="File"/>

        </pbcoreCollection>
    </xsl:template>

    <xsl:template match="File">
        <pbcoreDescriptionDocument>
            <xsl:apply-templates select="track[@type='General']"/>
        </pbcoreDescriptionDocument>
    </xsl:template>


    <xsl:template match="track[@type='General']">

        <!--variable declaration via parsing of filename-->

        <xsl:variable name="vDigits" select="0123456789"/>

        <xsl:variable name="collection">
            <xsl:value-of select="substring-before(FileName,'-')"/>
        </xsl:variable>

        <xsl:variable name="seriesAcronym">
            <xsl:value-of
                select="substring-before(substring-after (FileName,'-'),'-')"
            />
        </xsl:variable>

        <xsl:variable name="assetYear">
            <xsl:value-of
                select="substring-before(substring-after(substring-after(FileName,'-'),'-'),'-')"
            />
        </xsl:variable>

        <xsl:variable name="assetMonth">
            <xsl:value-of
                select="substring-before(substring-after(substring-after(substring-after(FileName,'-'),'-'),'-'),'-')"
            />
        </xsl:variable>

        <xsl:variable name="assetDay">
            <xsl:value-of
                select="substring-before(substring-after(substring-after(substring-after(substring-after(FileName,'-'),'-'),'-'),'-'),'-')"
            />
        </xsl:variable>


        <xsl:variable name="assetID">
            <xsl:value-of
                select="substring-before(substring-after(substring-after(substring-after(substring-after(substring-after(FileName,'-'),'-'),'-'),'-'),'-'),'.')"
            />
        </xsl:variable>

        <xsl:variable name="instantiationID">
            <xsl:value-of
                select="substring-before(substring-after(substring-after(substring-after(substring-after(substring-after(FileName,'-'),'-'),'-'),'-'),'-'),' ')"
            />
        </xsl:variable>

        <xsl:variable name="freeText">
            <xsl:value-of select="substring-after(FileName,' ')"/>
        </xsl:variable>
        

        <!--determine MUNI number-->

        
        <xsl:variable name="muniNumber">

            <xsl:choose>
                <xsl:when
                    test="$collection='MUNI' and (starts-with($freeText,'T') and contains($vDigits,substring($freeText,2,1)) or (starts-with($freeText,'LT') and contains($vDigits,substring($freeText,3,1))))">
                    <xsl:value-of
                        select="substring-before($freeText,' ')">                        
                    </xsl:value-of>
                </xsl:when>
                <xsl:otherwise/> 
            </xsl:choose>
        </xsl:variable>


        <!--determine MUNI format based on T or LT-->
        <xsl:variable name="originalMedium">
            <xsl:choose>
                <xsl:when 
                    test="starts-with($muniNumber,'T')">tape reel</xsl:when>
                <xsl:when
                    test="starts-with($muniNumber,'LT')">disc</xsl:when>
                
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="OriginalSourceMedium">
                            <xsl:value-of select="OriginalSourceMedium"/>
                        </xsl:when>
                        <xsl:otherwise/>
                    </xsl:choose>
                </xsl:otherwise>

            </xsl:choose>
        </xsl:variable>
        
        <xsl:variable name="generation">
            <xsl:choose>    
				<xsl:when test="not(contains(FileName, 'WEB EDIT')) or not(contains(FileName, 'AUDIOGRAM')) or not(contains(FileName, 'MONO EQ'))">
				    <xsl:value-of select="'Master: preservation'"/>
                </xsl:when>
                <xsl:when test="contains($freeText,'STEREO FLAT')">
                    <xsl:value-of select="'Master: preservation'"/>
                </xsl:when>
                <xsl:when test="contains($freeText, 'MONO EQ') or contains($freeText,'WEB EDIT') or contains($freeText,'AUDIOGRAM')">
                    <xsl:value-of select="'Copy: access'"/>
                </xsl:when>
            </xsl:choose>            
        </xsl:variable>


        <xsl:variable name="theme">
            <xsl:value-of select="concat('archive_import',$assetID)"/>
        </xsl:variable>

        <xsl:variable name="cmsURL">
            <xsl:value-of select="concat('http://audio.wnyc.org/archive_import',$theme,'.mp3')"/>
        </xsl:variable>

        <!-- assets -->

        <pbcoreIdentifier source="WNYC Archive Catalog">
            <xsl:value-of select="$assetID"/>
        </pbcoreIdentifier>

        <pbcoreTitle titleType="Collection">
            <xsl:value-of select="$collection"/>
        </pbcoreTitle>

        <!-- instantiations -->

        <pbcoreInstantiation>
            <instantiationIdentifier source="WNYC Media Archive Label">
                <xsl:value-of select="$instantiationID"/>
            </instantiationIdentifier>

            <instantiationIdentifier source="DAVID Title">
                <xsl:value-of select="FileName"/>
            </instantiationIdentifier>
            <!--xsl:if test="Title">
                <instantiationIdentifier source="INAM"> <xsl:value-of
                    select="Title"/> </instantiationIdentifier>
                    </xsl:if-->

            <instantiationDate dateType="Created">
                <xsl:value-of select="substring-before(Encoded_Date,' ')"/>
            </instantiationDate>
            <instantiationDigital>BWF</instantiationDigital>
            <instantiationLocation>DAVID</instantiationLocation>
            <instantiationMediaType>Sound</instantiationMediaType>
            <instantiationGenerations>
                <xsl:value-of select="$generation"/>
            </instantiationGenerations>
            <instantiationDuration>
                <xsl:value-of select="substring-before(Duration_String3, '.')"/>
            </instantiationDuration>
            <instantiationFileSize> <xsl:value-of select="FileSize_String"/></instantiationFileSize>
            <instantiationDataRate><xsl:value-of select="OverallBitRate_String"/></instantiationDataRate>
            <xsl:choose>
                <xsl:when test="../track/Channel_s = 1">
                    <instantiationChannelConfiguration>Mono</instantiationChannelConfiguration>
                </xsl:when>
                <xsl:when test="../track/Channel_s = 2">
                    <instantiationChannelConfiguration>Stereo</instantiationChannelConfiguration>
                </xsl:when>
            </xsl:choose>
            <xsl:if test="Encoded_Library_Settings">
                <instantiationAnnotation annotationType="Encoding_Notes">
                    <xsl:value-of select="Encoded_Library_Settings"/>
                </instantiationAnnotation>
            </xsl:if>       

            <xsl:choose>
                <xsl:when test="$collection='MUNI'">
                    <instantiationAnnotation annotationType="Provenance">
                        <xsl:value-of
                            select="concat('BWF created from the original WNYC Municipal Archives ',$originalMedium, '. Reformatted as part of NEH project.')"
                        />
                    </instantiationAnnotation>
                </xsl:when>
                <xsl:otherwise>
                    <instantiationAnnotation annotationType="Provenance">
                        <xsl:value-of select="$originalMedium"/>
                    </instantiationAnnotation>
                </xsl:otherwise>
            </xsl:choose>

            <xsl:if test="Comment">
                <instantiationAnnotation annotationType="Embedded_Comments">
                    <xsl:value-of select="Comment"/>
                </instantiationAnnotation>
            </xsl:if>

            <!--    essence tracks-->
            <instantiationEssenceTrack>
                <essenceTrackType>audio</essenceTrackType>
                <essenceTrackIdentifier source="DAVID Title">
                    <xsl:value-of select="FileName"/>
                </essenceTrackIdentifier>
                <essenceTrackStandard>
                    <xsl:value-of select="../track[@type='Audio']/Format_Commercial"
                    />
                </essenceTrackStandard>

                <essenceTrackEncoding>
                    <xsl:value-of select="Codec_String"/>
                </essenceTrackEncoding>
                
                <essenceTrackDataRate>
                    <xsl:value-of select="../track[@type='Audio']/BitRate_String"
                    />
                </essenceTrackDataRate>

                <essenceTrackSamplingRate>
                    <xsl:value-of select="../track/SamplingRate"/>
                </essenceTrackSamplingRate>
                <essenceTrackBitDepth>
                    <xsl:value-of select="../track/Resolution"/> bit
                </essenceTrackBitDepth>
                
            </instantiationEssenceTrack>
        </pbcoreInstantiation>


    </xsl:template>
</xsl:stylesheet>
